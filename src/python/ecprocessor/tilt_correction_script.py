"""
Apply tilt corrections to either a single file or to multiple files.

TODO: We can currently apply tilt corrections to summary files, but not to raw (fast) files. Implement tilt correction for fast files. Could add another tilt_correction_algorithms method for this.
"""

import argparse
from pathlib import Path
import sys
import pandas as pd

from tiltcorrections import *
from utils.util import read_campbell_file

def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=('''
        Apply tilt corrections to either a single file or to multiple files.
        --------------------------------
        Input files can be either .csv, .pickle, or .parquet files, but their extensions should indicate such.
        '''))
    parser.add_argument(
        '-i', '--input', 
        required=True, 
        help='path to input file or list of files',
        nargs='+',
    )
    parser.add_argument(
        '-o', '--output', 
        help='path to output directory', 
        default=''
    )
    parser.add_argument(
        '--outformat', help='output file format. If overwrite is specified and an output is not provided, this argument is ignored.', choices=['csv', 'pickle', 'parquet'], default='csv'
    )
    parser.add_argument(
        '-ov', '--overwrite', 
        action='store_true',
        help='overwrite the input files in the case that an output is not provided.\n'
            + 'If an output file is provided, this argument is ignored.'
    )
    parser.add_argument(
        '-s', '--summary',
        required=True,
        help='Path to the summary file generated by utils.summarize_files()'
    )
    parser.add_argument(
        '-m', '--method', 
        required=True, 
        choices=['DR', 'TR', 'PF', 'CPF'], 
        nargs='+',
        help='Tilt correction method to apply. Choose one or several of:\n'
            + '    DR: Double Rotation\n'
            + '    TR: Triple Rotation\n'
            + '    PF: Planar Fit\n'
            + '    CPF: Continuous Planar Fit. If CPF is specified, you should specify -n as well.'
    )
    parser.add_argument(
        '-n', '--order',
        type=int,
        nargs='*',
        help='Order of the continuous planar fit method to apply.\n' 
            + 'Order 1 is identical to the standard planar fit.\n'
            + 'No effect if CPF is not specified.\n'
            + 'If multiple CPF methods are provided, then you must provide one -n for each method.'
    ) 

    # format arguments
    args = parser.parse_args()
    if not isinstance(args.input, list):
        args.input = [args.input]
    if not isinstance(args.method, list):
        args.method = [args.method]
    if not isinstance(args.order, list):
        args.order = [args.order]
    
    read_file = {
        '.parquet': pd.read_parquet,
        '.csv': pd.read_csv,
        '.pickle': pd.read_pickle,
        '.dat': read_campbell_file
    }

    # read in summary data
    file_type = Path(args.summary).suffix
    summary = read_file[file_type](args.summary)

    # apply the requested fit(s)
    i_order = 0
    for method in args.method:
        print(f'Applying {method}')
        if method == 'CPF':
            print(f'Order {args.order[i_order]}')
        # compute rotation angles using the given method(s)
        U, V, W = summary['U_mean'], summary['V_mean'], summary['W_mean']
        if method == 'TR':
            theta, phi, psi = get_triple_rotation_angles(U, V, W)
        else:
            theta, phi = get_double_rotation_angles(U, V, W)

        if method == 'PF':
            _, phi_func, phidot_func = get_continuous_planar_fit_angles(theta, phi, 1)
            phi = phi_func(theta)
            phidot = phidot_func(theta)
        elif method == 'CPF':
            n = args.order[i_order]
            _, phi_func, phidot_func = get_continuous_planar_fit_angles(theta, phi, n)
            phi = phi_func(theta)
            phidot = phidot_func(theta)
            i_order += 1
        
        # apply rotation angles to the given file(s)
        for fn_in, fn_out in zip(args.input, args.output):
            fn_in = Path(fn_in)
            file_type = fn_in.suffix
            fast = read_file[file_type](fn_in)
            print(fast.columns)
            if method == 'TR':
                U, V, W = triple_rotation_fit_from_angles(fast['Ux_CSAT3B'], fast['Uy_CSAT3B'], fast['Uz_CSAT3B'], theta, phi, psi)
            elif method == 'DR':
                U, V, W = double_rotation_fit_from_angles(fast['Ux_CSAT3B'], fast['Uy_CSAT3B'], fast['Uz_CSAT3B'], theta, phi)
            elif method == 'PF':
                U, V, W = continuous_planar_fit_from_angles(fast['Ux_CSAT3B'], fast['Uy_CSAT3B'], fast['Uz_CSAT3B'], theta, phi, phidot)
            elif method == 'CPF':
                U, V, W = continuous_planar_fit_from_angles(fast['Ux_CSAT3B'], fast['Uy_CSAT3B'], fast['Uz_CSAT3B'], theta, phi, phidot)
            
            fast['U'], fast['V'], fast['W'] = U, V, W
            fast = fast.reset_index()

            # write output file
            if args.overwrite and not args.output:
                fn_out = Path(fn_out)
                args.outformat = fn_out.suffix[1:]
            elif args.output:
                fn_out = Path(args.output) / f'{fn_in.stem}.{args.outformat}'

            if args.outformat == 'csv':
                fast.to_csv(fn_out, index=False)
            elif args.outformat == 'pickle':
                fast.to_pickle(fn_out)
            elif args.outformat == 'parquet':
                fast.to_parquet(fn_out)

if __name__ == '__main__':
    main()
    