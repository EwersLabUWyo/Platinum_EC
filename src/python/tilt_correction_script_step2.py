"""
Apply tilt corrections to either a single file or to multiple files.

TODO: We can currently apply tilt corrections to summary files, but not to raw (fast) files. Implement tilt correction for fast files. Could add another tilt_correction_algorithms method for this.
"""

import argparse
from pathlib import Path
import sys
import pandas as pd
import xarray as xr

from ecprocessor.tiltcorrections import *
from ecprocessor.utils import read_campbell_file

def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=('''
        Apply tilt correction to a given file.
        --------------------------------
        Currently, only TOA5 input files are supported.
        '''))
    parser.add_argument(
        '-i', '--input', 
        required=True, 
        help='path to input file',
    )
    parser.add_argument(
        '-d', '--dest', 
        help='path to output directory', 
        default=''
    )
    parser.add_argument(
        '-s', '--summary',
        required=True,
        help='Path to the summary file generated by utils.compute_aggregate_metrics()'
    )
    parser.add_argument(
        '-f', '--format', choices=['TOA5', 'pickle'], help='Input file format.'
    )
    parser.add_argument(
        '-m', '--method', 
        required=True, 
        help='Tilt correction method to apply. Choose one of:\n'
            + '    DR: Double Rotation\n'
            + '    TR: Triple Rotation\n'
            + '    PF: Planar Fit\n'
            + '    CPFn: n-th order Continuous Planar Fit. Replace "n" with the desired order of the fourier series fit. n=1 is identical to the standard Planar Fit. For example, CPF5 would give a 5th order fit, and CPF15 would give a 15th order fit.'
    )
    parser.add_argument(
        '-r', '--renaming_dict', required=True, 
        help='Renaming scheme for raw file names.\n'
            + '    Example: Ux_3m=U,Uy_3m=V,Ts_17m=Ts\n'
            + 'Refer to utils.summarize_files for further documentation.'
    )
    
    args = parser.parse_args()

    renaming_dict = {v.split('=')[0]:v.split('=')[1] for v in args.renaming_dict.split(',')}

    try: Path(args.dest).mkdir()
    except: pass

    summary = xr.open_dataset(args.summary)
    if args.format == 'TOA5':
        dat = read_campbell_file(args.input).rename(columns=renaming_dict)
    else:
        dat = pd.read_pickle(args.input)
    fns = summary['fn'].data

    if args.method == 'DR':
        theta = summary['Theta'].data[fns == args.input]
        phi = summary['Phi'].data[fns == args.input]
        uvw_rot = double_rotation_fit_from_angles(dat['U'], dat['V'], dat['W'], theta, phi)
    elif args.method == 'TR':
        theta = summary['Theta'].data[fns == args.input]
        phi = summary['Phi'].data[fns == args.input]
        psi = summary['Psi'].data[fns == args.input]
        uvw_rot = triple_rotation_fit_from_angles(dat['U'], dat['V'], dat['W'], theta, phi, psi)
    elif args.method == 'PF':
        theta = summary['Theta'].data[fns == args.input]
        phi = summary['Phi'].data[fns == args.input]
        phidot = summary['Phidot'].data[fns == args.input]
        uvw_rot = continuous_planar_fit_from_angles(dat['U'], dat['V'], dat['W'], theta, phi, phidot)
    elif args.method[:3] == 'CPF':
        n = None
        theta = summary['Theta'].data[fns == args.input]
        phi = summary['Phi'].data[fns == args.input]
        phidot = summary['Phidot'].data[fns == args.input]
        uvw_rot = continuous_planar_fit_from_angles(dat['U'], dat['V'], dat['W'], theta, phi, phidot)
    
    dat['U'] = uvw_rot[:, 0]
    dat['V'] = uvw_rot[:, 1]
    dat['W'] = uvw_rot[:, 2]

    unnaming_dict = {v:k for v, k in renaming_dict.items()}
    dat = dat.rename(columns=unnaming_dict)

    fn_out = Path(args.dest) / Path(args.input).with_suffix('.pickle').name
    dat.to_pickle(fn_out)

    print(fn_out)

if __name__ == '__main__':
    main()
    